#!/usr/bin/env ruby

require 'thor'
require 'lz'

# Main Thor class for LZ
class LZ < Thor
  desc 'init', 'Create new lz configuration skeleton'
  def init
    Config.init
  end

  desc 'config', 'Inspect lz configuration'
  def config
    Config.print
  end

  desc 'version', 'Print lz version info'
  def version
    Config.version
  end

  desc 'render', 'Render CloudFormation templates for lz and local resources'
  def render
    Renderer.render_all
  end

  desc 'organization COMMAND', 'Configure organization and organizational units'
  long_desc <<-DESC
    Manage AWS Organization and organizational units.
    Commands:
      - 'deploy':  lz will try to deploy the organization and it's structure as
                   configured in the configuration.
      - 'destroy': lz will attempt to destroy the organization completely.
  DESC
  def organization(command)
    cfg = Config.load
    return Organization.deploy(config: cfg) if command.casecmp('deploy').zero?
    return Organization.destroy(config: cfg) if command.casecmp('destroy').zero?

    Interface.error(message: "unable to understand '#{command}'")
  end

  desc 'accounts COMMAND', 'Create accounts and attach to organization'
  long_desc <<-DESC
    Create and configure AWS accounts to the currently configured organization.
    Commands:
      - 'deploy':  lz will attempt to configure all accounts as configured and
                   will try to enroll them into the organization at the specific
                   organizational units.
      - 'destroy': lz will suspend accounts.
  DESC
  def accounts(command)
    cfg = Config.load
    return Accounts.deploy(config: cfg) if command.casecmp('deploy').zero?
    return Accounts.destroy(config: cfg) if command.casecmp('destroy').zero?

    Interface.error(message: "unable to understand '#{command}'")
  end

  desc 'resources COMMAND', 'Deploy resources per account'
  long_desc <<-DESC
    Manage AWS resources according to configuration.
    Commands:
      - 'deploy':  lz will try to deploy all defined stacks and provision
                   resources into AWS accounts.
      - 'destroy': lz will collapse all stacks and destroy all resources.
  DESC
  def resources(command)
    cfg = Config.load
    return Resources.deploy(config: cfg) if command.casecmp('deploy').zero?
    return Resources.destroy(config: cfg) if command.casecmp('destroy').zero?

    Interface.error(message: "unable to understand '#{command}'")
  end
end

LZ.start(ARGV)
